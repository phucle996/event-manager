package app

import (
	dbmongo "event_manager/infra/db"
	"fmt"
	"log"
	"os"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/mongo"
)

// App qu·∫£n l√Ω to√†n b·ªô ·ª©ng d·ª•ng (DB, Modules, Router)
type App struct {
	Modules *Modules
	Router  *gin.Engine
	Client  *mongo.Client
}

// ‚úÖ Kh·ªüi t·∫°o to√†n b·ªô ·ª©ng d·ª•ng
func NewApplication() *App {
	dbURL := os.Getenv("DB_URL")
	if dbURL == "" {
		panic("‚ö†Ô∏è Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng DB_URL")
	}

	client, err := dbmongo.ConnectMongoDB(dbURL)
	if err != nil {
		panic(fmt.Errorf("‚ùå K·∫øt n·ªëi Mongo th·∫•t b·∫°i: %w", err))
	}
	fmt.Println("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng.")

	// Kh·ªüi t·∫°o Modules
	modules := NewModules(client)

	// Kh·ªüi t·∫°o Router
	router := gin.Default()
	RegisterRoutes(router, modules)

	return &App{
		Modules: modules,
		Router:  router,
		Client:  client,
	}
}

// ‚úÖ Kh·ªüi ƒë·ªông app
func (a *App) Start() error {
	host := os.Getenv("APP_HOST")
	if host == "" {
		host = "0.0.0.0"
	}
	port := os.Getenv("APP_PORT")
	if port == "" {
		port = "8080"
	}

	addr := fmt.Sprintf("%s:%s", host, port)
	fmt.Printf("üöÄ Server ƒëang ch·∫°y t·∫°i http://%s\n", addr)
	return a.Router.Run(addr)
}

// ‚úÖ D·ª´ng app v√† ƒë√≥ng k·∫øt n·ªëi DB
func (a *App) Stop() {
	if a.Client == nil {
		return
	}
	if err := dbmongo.StopMongoDB(a.Client); err != nil {
		log.Println("‚ö†Ô∏è L·ªói khi ng·∫Øt k·∫øt n·ªëi MongoDB:", err)
	} else {
		fmt.Println("üõë ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB th√†nh c√¥ng.")
	}
}
